// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: src/api/rpc/event.proto

package rpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type UserProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        int32                `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Nickname  string               `protobuf:"bytes,2,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	Email     string               `protobuf:"bytes,3,opt,name=Email,proto3" json:"Email,omitempty"`
	Password  string               `protobuf:"bytes,4,opt,name=Password,proto3" json:"Password,omitempty"`
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,5,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,6,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *UserProto) Reset() {
	*x = UserProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_api_rpc_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProto) ProtoMessage() {}

func (x *UserProto) ProtoReflect() protoreflect.Message {
	mi := &file_src_api_rpc_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProto.ProtoReflect.Descriptor instead.
func (*UserProto) Descriptor() ([]byte, []int) {
	return file_src_api_rpc_event_proto_rawDescGZIP(), []int{0}
}

func (x *UserProto) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UserProto) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserProto) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserProto) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UserProto) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UserProto) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type EventProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        int64                `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Title     string               `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Content   string               `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
	AuthorID  int32                `protobuf:"varint,5,opt,name=AuthorID,proto3" json:"AuthorID,omitempty"`
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,6,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,7,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *EventProto) Reset() {
	*x = EventProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_api_rpc_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventProto) ProtoMessage() {}

func (x *EventProto) ProtoReflect() protoreflect.Message {
	mi := &file_src_api_rpc_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventProto.ProtoReflect.Descriptor instead.
func (*EventProto) Descriptor() ([]byte, []int) {
	return file_src_api_rpc_event_proto_rawDescGZIP(), []int{1}
}

func (x *EventProto) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *EventProto) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *EventProto) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *EventProto) GetAuthorID() int32 {
	if x != nil {
		return x.AuthorID
	}
	return 0
}

func (x *EventProto) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *EventProto) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type ListEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListEventRequest) Reset() {
	*x = ListEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_api_rpc_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventRequest) ProtoMessage() {}

func (x *ListEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_api_rpc_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventRequest.ProtoReflect.Descriptor instead.
func (*ListEventRequest) Descriptor() ([]byte, []int) {
	return file_src_api_rpc_event_proto_rawDescGZIP(), []int{2}
}

type ListEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event *EventProto `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *ListEventResponse) Reset() {
	*x = ListEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_api_rpc_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventResponse) ProtoMessage() {}

func (x *ListEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_api_rpc_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventResponse.ProtoReflect.Descriptor instead.
func (*ListEventResponse) Descriptor() ([]byte, []int) {
	return file_src_api_rpc_event_proto_rawDescGZIP(), []int{3}
}

func (x *ListEventResponse) GetEvent() *EventProto {
	if x != nil {
		return x.Event
	}
	return nil
}

var File_src_api_rpc_event_proto protoreflect.FileDescriptor

var file_src_api_rpc_event_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x72, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x72, 0x70, 0x63, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xdd, 0x01, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0xdc, 0x01, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x12,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x3a, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x32, 0x4c,
	0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3c,
	0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x0d, 0x5a, 0x0b,
	0x73, 0x72, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_src_api_rpc_event_proto_rawDescOnce sync.Once
	file_src_api_rpc_event_proto_rawDescData = file_src_api_rpc_event_proto_rawDesc
)

func file_src_api_rpc_event_proto_rawDescGZIP() []byte {
	file_src_api_rpc_event_proto_rawDescOnce.Do(func() {
		file_src_api_rpc_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_src_api_rpc_event_proto_rawDescData)
	})
	return file_src_api_rpc_event_proto_rawDescData
}

var file_src_api_rpc_event_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_src_api_rpc_event_proto_goTypes = []interface{}{
	(*UserProto)(nil),           // 0: rpc.UserProto
	(*EventProto)(nil),          // 1: rpc.EventProto
	(*ListEventRequest)(nil),    // 2: rpc.ListEventRequest
	(*ListEventResponse)(nil),   // 3: rpc.ListEventResponse
	(*timestamp.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_src_api_rpc_event_proto_depIdxs = []int32{
	4, // 0: rpc.UserProto.CreatedAt:type_name -> google.protobuf.Timestamp
	4, // 1: rpc.UserProto.UpdatedAt:type_name -> google.protobuf.Timestamp
	4, // 2: rpc.EventProto.CreatedAt:type_name -> google.protobuf.Timestamp
	4, // 3: rpc.EventProto.UpdatedAt:type_name -> google.protobuf.Timestamp
	1, // 4: rpc.ListEventResponse.event:type_name -> rpc.EventProto
	2, // 5: rpc.EventService.ListEvent:input_type -> rpc.ListEventRequest
	3, // 6: rpc.EventService.ListEvent:output_type -> rpc.ListEventResponse
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_src_api_rpc_event_proto_init() }
func file_src_api_rpc_event_proto_init() {
	if File_src_api_rpc_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_src_api_rpc_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_api_rpc_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_api_rpc_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_api_rpc_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_src_api_rpc_event_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_src_api_rpc_event_proto_goTypes,
		DependencyIndexes: file_src_api_rpc_event_proto_depIdxs,
		MessageInfos:      file_src_api_rpc_event_proto_msgTypes,
	}.Build()
	File_src_api_rpc_event_proto = out.File
	file_src_api_rpc_event_proto_rawDesc = nil
	file_src_api_rpc_event_proto_goTypes = nil
	file_src_api_rpc_event_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventServiceClient interface {
	// Grpc streaming list of event from unary request
	ListEvent(ctx context.Context, in *ListEventRequest, opts ...grpc.CallOption) (EventService_ListEventClient, error)
}

type eventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventServiceClient(cc grpc.ClientConnInterface) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) ListEvent(ctx context.Context, in *ListEventRequest, opts ...grpc.CallOption) (EventService_ListEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventService_serviceDesc.Streams[0], "/rpc.EventService/ListEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventServiceListEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventService_ListEventClient interface {
	Recv() (*ListEventResponse, error)
	grpc.ClientStream
}

type eventServiceListEventClient struct {
	grpc.ClientStream
}

func (x *eventServiceListEventClient) Recv() (*ListEventResponse, error) {
	m := new(ListEventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventServiceServer is the server API for EventService service.
type EventServiceServer interface {
	// Grpc streaming list of event from unary request
	ListEvent(*ListEventRequest, EventService_ListEventServer) error
}

// UnimplementedEventServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEventServiceServer struct {
}

func (*UnimplementedEventServiceServer) ListEvent(*ListEventRequest, EventService_ListEventServer) error {
	return status.Errorf(codes.Unimplemented, "method ListEvent not implemented")
}

func RegisterEventServiceServer(s *grpc.Server, srv EventServiceServer) {
	s.RegisterService(&_EventService_serviceDesc, srv)
}

func _EventService_ListEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListEventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServiceServer).ListEvent(m, &eventServiceListEventServer{stream})
}

type EventService_ListEventServer interface {
	Send(*ListEventResponse) error
	grpc.ServerStream
}

type eventServiceListEventServer struct {
	grpc.ServerStream
}

func (x *eventServiceListEventServer) Send(m *ListEventResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _EventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListEvent",
			Handler:       _EventService_ListEvent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "src/api/rpc/event.proto",
}
